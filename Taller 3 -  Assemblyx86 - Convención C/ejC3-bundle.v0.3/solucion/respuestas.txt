a) ¿Qué entienden por convencion de llamada? ¿Cómo está definida en la ABI de System V para 64 y 32 bits?
Es un acuerdo en el que se determina como se realizan los llamados a funciones, dónde se deben guardar los parámetros,
y como se debe acomodar la estructura. En 64 bits la convenvión se especifica para los registros de propósito
general y la pila, mientraas que en 32 bits únicamente se utiliza la pila.

b) ¿Quién toma la responsabilidad de asegurar que se cumple la convención de llamada en C? ¿Quién toma la respon-
sabilidad de asegurar que se cumple la convención de llamada en ASM?
En C el encargado de asegurar la convención de llamada es el compilador, mientras que ASM es el programador.

c) ¿Qué es un stack frame? ¿A qué se le suele decir prólogo y epı́logo?
Un stack frame es una sección de la pila que contiene la información importante para una función: incluye
los parámetros que recibe, las variables locales/temporales, la dirección de retorno y el padding
(si es que se necesita).
El prólogo es la parte del código en la cual se reserva el espacio necesario para las variables temporales,
se realiza padding para mantener alineada la pila y se preservan los valores de los registros no volátiles.
El epílogo es la parte del código donde se restauran los valores de los registros no volatiles y se
devuelve la pila a su estado inicial.

d) ¿Cuál es el mecanismo utilizado para almacenar variables temporales?
Al almacenar variables temporales, primero se reserva la memoria necesaria realizando un sub al RSP.
Despues para almacenar los datos, se accede mediante un offset negativo al RBP.

e) ¿A cuántos bytes es necesario alinear la pila si utilizamos funciones de libc? ¿Si la pila está alienada a 16 bytes
al realizarse una llamada función, cuál va a ser su alineamiento al ejecutar la primera instrucción de la función
llamada?
Se deben alinear a 16 bytes. Al ejecutar la primera intruccion de una función, la pila se encuentra desalineada
ya que previamente se realiza un push del RBP

f) Una actualización de bibliotecas realiza los siguientes cambios a distintas funciones. ¿Cómo se ven impactados los
programas ya compilados?
Sugerencia: Describan la convención de llamada de cada una (en su versión antes y después del cambio).

- Una biblioteca de procesamiento cambia la estructura pixel t:
    • Antes era struct { uint8_t r, g, b, a; }
    • Ahora es struct { uint8_t a, r, g, b; }
¿Cómo afecta esto a la función void a_escala_de_grises(uint32_t ancho, uint32_t alto, pixel_t* data)?

El problema es que cuando se quiere acceder a un elemento de data, se va a devolver uno distinto. Por ejemplo:
data->a = data[0] = devuelve el valor de r != a


- Se reordenan los parámetros (i.e. intercambian su posición) de la función
float sumar_floats(float* array, uint64_t tamano).

El problema es que los valores se van a guardan al revés en los registros, por lo que no va a tener el comportamiento
deseado.

- La función uint16_t registrar_usuario(char* nombre, char* contrasena) registra un usuario y devuelve su ID.
 ara soportar más usuarios se cambia el tipo de retorno por uint64_t.

OPCION 1: Se siguen generando 16 bists en la funcion y en el registro se siguen guardando esos 16 bits,
OPCION 2: En el registro se guardan 64 bits, pero internamente se usaran 16 bits.

- La función void cambiar_nombre(uint16_t user_id, char* nuevo_nombre) también recibe la misma ac-
tualización. ¿Qué sucede ahora?
